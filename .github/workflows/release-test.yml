name: Build Test

on:
  workflow_dispatch:

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      # Step 1: Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v3
    
      - name: Prepare Dist Folder
        run: |
          mkdir -p dist
          mkdir -p dist/cs-windows-amd64
          mkdir -p dist/cs-windows-amd64/database
          cp ./LICENSE dist/cs-windows-amd64
          cp ./README.md dist/cs-windows-amd64
          cp -r ./static dist/cs-windows-amd64
          cp -r ./locales dist/cs-windows-amd64
          mkdir -p dist/cs-windows-arm64
          mkdir -p dist/cs-windows-arm64/database
          cp ./LICENSE dist/cs-windows-arm64
          cp ./README.md dist/cs-windows-arm64
          cp -r ./static dist/cs-windows-arm64
          cp -r ./locales dist/cs-windows-arm64
      # Step 2: Set up Go environment
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'

      # Step 4: Install MinGW for Cross-Compilation
      - name: Install MinGW
        run: |
          choco install mingw -y
          Write-Host "MinGW installed for cross-compilation"

      # Step 5: Set Environment Variables
      - name: Set Environment Variables
        run: |
          echo "CGO_ENABLED=1" >> $env:GITHUB_ENV
          echo "CC=x86_64-w64-mingw32-gcc" >> $env:GITHUB_ENV

      # Step 7: Build the Application
      - name: Build Windows Binary
        run: |
          go build -o dist/cs-windows-amd64/cs-windows-amd64.exe ./cmd/api
          echo "GOARCH=arm64" >> $env:GITHUB_ENV
          go build -o dist/cs-windows-arm64/cs-windows-arm64.exe ./cmd/api
      #go build -tags=duckdb_use_lib -o dist/cs-windows-amd64.exe ./cmd/api
        
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-binary
          path: dist/**  